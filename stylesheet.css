/* =========================================================
   1) CSS Variables (with fallback), Custom Fonts (with fallback)
   2) Relative & Dynamic Viewport Units
   3) CSS Flex/Grid Layout
   4) Animations, Transitions & Transforms
   5) Media Queries for Responsive Design
   6) Advanced color(), color-mix(), new selectors like :has()
   7) (Extra Credit) Nested & Scoped CSS example at the bottom
   ========================================================= */

/* --------------------------------
   CSS Variables with fallback
   -------------------------------- */
:root {
  /* Use a fallback right in the property definition */
  --primary-color: #3c78d8; /* fallback default color */
  --accent-color: #c05050;
  --bgColor: #fafafa;
  --headerFont: "MyCustomFont", Arial, sans-serif;

  /* Example of wide-gamut or color-mix usage (only in modern browsers).
     If color-mix is not supported, it gracefully falls back to #3c78d8. */
  --gradient-color: color-mix(in srgb, #3c78d8 50%, #c05050);
}

body {
  /* Fallback color: #fafafa if CSS var not recognized by old browsers */
  background-color: var(--bgColor, #fafafa);
  margin: 0;
  padding: 0;

  /* Font family uses the custom font, then falls back. */
  font-family: var(--headerFont, Arial), sans-serif;
  color: #333;
}

/* --------------------------------
   Custom Fonts with fallback
   -------------------------------- */
@font-face {
  font-family: "MyCustomFont";
  src:
    url("fonts/MyCustomFont.woff2") format("woff2"),
    url("fonts/MyCustomFont.woff") format("woff");
  font-display: swap; /* ensures text is visible while font loads */
}

/* If the custom font fails, it defaults to Arial, then sans-serif from :root */

/* --------------------------------
   Example of a simple CSS Grid Layout
   -------------------------------- */
html,
body {
  height: 100%;
}

body {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr auto;
  grid-template-areas:
    "header"
    "main"
    "footer";
}

/* Header, Main, Footer placement */
header {
  grid-area: header;
  background-color: var(--primary-color, #3c78d8);
  color: white;
  padding: 1rem;
}

main {
  grid-area: main;
  padding: 1rem;
}

footer {
  grid-area: footer;
  background-color: #444;
  color: #fff;
  padding: 1rem;
  text-align: center;
}

/* --------------------------------
   Navigation (Flexbox example)
   -------------------------------- */
header nav ul {
  list-style: none;
  margin: 0;
  padding: 0;

  display: flex; /* using flex for the nav links */
  gap: 1rem;
}

header nav ul li a {
  text-decoration: none;
  color: #fff;
  transition: color 0.3s ease; /* subtle transition example */
}

header nav ul li a:hover {
  color: var(--accent-color, #c05050);
}

/* --------------------------------
   Example of color() or color-mix()
   -------------------------------- */
button,
input[type="submit"],
input[type="button"],
input[type="reset"] {
  background: var(
    --gradient-color,
    #3c78d8
  ); /* fallback if color-mix isn't supported */
  color: #fff;
  border: none;
  padding: 0.6rem 1rem;
  cursor: pointer;
  transition: background 0.4s ease;
}

button:hover {
  background: color-mix(in srgb, #c05050 50%, #3c78d8 50%);
  /* Fallback if not supported would remain the same color as above. */
}

/* --------------------------------
   Relative & Dynamic Viewport Units
   -------------------------------- */
h1 {
  font-size: 2rem; /* relative unit */
}

h2 {
  font-size: 1.8em; /* relative to inherited font size */
}

section {
  padding: 2dvh; /* dynamic viewport height-based spacing */
}

/* --------------------------------
   Transitions & Transforms
   -------------------------------- */
figure img {
  transition:
    transform 0.5s ease,
    box-shadow 0.5s ease;
}

figure img:hover {
  transform: scale(1.05) rotate(1deg);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
}

/* --------------------------------
   Simple CSS Animation example
   -------------------------------- */
@keyframes pulse {
  0% {
    transform: scale(1);
    background-color: var(--accent-color);
  }
  50% {
    transform: scale(1.1);
    background-color: var(--primary-color);
  }
  100% {
    transform: scale(1);
    background-color: var(--accent-color);
  }
}

.pulse-box {
  width: 100px;
  height: 100px;
  background-color: var(--accent-color);
  animation: pulse 3s infinite;
}

/* --------------------------------
   :has() Selector example
   This is experimental but can be used in some modern browsers.
   -------------------------------- */
nav:has(> ul > li:hover) {
  outline: 2px dashed var(--accent-color);
}

/* --------------------------------
   Media Queries for Responsive Layout
   (3 form factors: small phone, tablet, desktop)
   -------------------------------- */

/* Very Small Screens (Phone) */
@media (max-width: 600px) {
  body {
    grid-template-columns: 1fr;
    grid-template-rows: auto 1fr auto;
  }
  header nav ul {
    flex-direction: column;
  }
  main {
    padding: 1rem;
  }
}

/* Medium Screens (Tablet / small laptop) */
@media (min-width: 601px) and (max-width: 992px) {
  body {
    grid-template-columns: 1fr;
    /* Could place nav on left and main on right, for instance */
  }
  header nav ul {
    flex-direction: row;
  }
  main {
    padding: 1.5rem;
  }
}

/* Desktop (>= 993px) */
@media (min-width: 993px) {
  body {
    /* Example of a 2-column layout for desktop */
    grid-template-columns: 200px 1fr;
    grid-template-areas:
      "header header"
      "main main"
      "footer footer";
  }
  main {
    padding: 2rem;
  }
}

/* --------------------------------
   Extra Credit: Nested & Scoped CSS
   (Experimental features / future specs)
   -------------------------------- */

/* SCOPED CSS example:
   The @scope rule allows you to scope styles to a subtree of the DOM. 
   Not fully supported in all browsers, but here's how it might look:
*/
/*
@scope (main#my-scoped-area) {
  h2 {
    color: purple;
  }
  .card {
    background-color: #fff;
  }
}
*/

/* NESTED CSS example (W3C CSS Nesting Draft). 
   This also may need a preprocessor or a future browser.
*/
/*
.container {
  padding: 1rem;
  & h2 {
    font-size: 1.8rem;
  }
  & p {
    margin-bottom: 1rem;
  }
}
*/
